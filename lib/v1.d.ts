/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/extra/stats/trade-volume": {
    /**
     * Retrieves the unit trade volume (total units sold) and Gil trade volume (total Gil exchanged) of the
     * specified item over the provided period. Tax is not included in this calculation.
     */
    get: {
      parameters: {
        query: {
          /** @description The world to query. */
          world?: string;
          /** @description The data center to query. */
          dcName?: string;
          /** @description The ID of the item to query. */
          item: number;
          /** @description The time, in milliseconds since the UNIX epoch, to begin the interval over. */
          from: number;
          /**
           * @description The time, in milliseconds since the UNIX epoch, to end the interval over. If this is not provided, it
           * will be set to the current time.
           */
          to?: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["TradeVolumeView"];
            "application/json": components["schemas"]["TradeVolumeView"];
            "text/json": components["schemas"]["TradeVolumeView"];
          };
        };
        /** @description No world or data center was provided. */
        400: never;
        /** @description The world/DC/item requested is invalid. */
        404: never;
      };
    };
  };
  "/api/data-centers": {
    /** Returns all data centers supported by the API. */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": (components["schemas"]["DataCenter"])[];
            "application/json": (components["schemas"]["DataCenter"])[];
            "text/json": (components["schemas"]["DataCenter"])[];
          };
        };
      };
    };
  };
  "/api/worlds": {
    /** Returns the IDs and names of all worlds supported by the API. */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": (components["schemas"]["World"])[];
            "application/json": (components["schemas"]["World"])[];
            "text/json": (components["schemas"]["World"])[];
          };
        };
      };
    };
  };
  "/api/extra/content/{contentId}": {
    /**
     * Returns the content object associated with the provided content ID. Please note that this endpoint is largely untested,
     * and may return inconsistent data at times.
     */
    get: {
      parameters: {
        path: {
          /** @description The ID of the content object to retrieve. */
          contentId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["ContentView"];
            "application/json": components["schemas"]["ContentView"];
            "text/json": components["schemas"]["ContentView"];
          };
        };
      };
    };
  };
  "/api/extra/stats/least-recently-updated": {
    /** Get the least-recently updated items on the specified world or data center, along with the upload times for each item. */
    get: {
      parameters: {
        query?: {
          /** @description The world to request data for. */
          world?: string;
          /** @description The data center to request data for. */
          dcName?: string;
          /** @description The number of entries to return (default 50, max 200). */
          entries?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["MostRecentlyUpdatedItemsView"];
            "application/json": components["schemas"]["MostRecentlyUpdatedItemsView"];
            "text/json": components["schemas"]["MostRecentlyUpdatedItemsView"];
          };
        };
        /** @description The world/DC requested is invalid. */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/api/{worldDcRegion}/{itemIds}": {
    /**
     * Retrieves the data currently shown on the market board for the requested item and world or data center.
     * Up to 100 item IDs can be comma-separated in order to retrieve data for multiple items at once.
     */
    get: {
      parameters: {
        query?: {
          /** @description The number of listings to return per item. By default, all listings will be returned. */
          listings?: string;
          /** @description The number of recent history entries to return per item. By default, a maximum of 5 entries will be returned. */
          entries?: string;
          /**
           * @description If the result should not have Gil sales tax (GST) factored in. GST is applied to all
           * consumer purchases in-game, and is separate from the retainer city tax that impacts what sellers receive.
           * By default, GST is factored in. Set this parameter to true or 1 to prevent this.
           */
          noGst?: string;
          /** @description Filter for HQ listings and entries. By default, both HQ and NQ listings and entries will be returned. */
          hq?: string;
          /** @description The amount of time before now to calculate stats over, in milliseconds. By default, this is 7 days. */
          statsWithin?: string;
          /** @description The amount of time before now to take entries within, in seconds. Negative values will be ignored. */
          entriesWithin?: string;
          /**
           * @description A comma separated list of fields that should be included in the response, if omitted will return all fields.
           * For example if you're only interested in the listings price per unit you can set this to listings.pricePerUnit
           */
          fields?: string;
        };
        path: {
          /** @description The item ID or comma-separated item IDs to retrieve data for. */
          itemIds: string;
          /** @description The world, data center, or region to retrieve data for. This may be an ID or a name. Regions should be specified as Japan, Europe, North-America, Oceania, China, or 中国. */
          worldDcRegion: string;
        };
      };
      responses: {
        /** @description Data retrieved successfully. */
        200: {
          content: {
            "text/plain": components["schemas"]["CurrentlyShownMultiView"];
            "application/json": components["schemas"]["CurrentlyShownMultiView"];
            "text/json": components["schemas"]["CurrentlyShownMultiView"];
          };
        };
        /** @description The parameters were invalid. */
        400: never;
        /**
         * @description The world/DC or item requested is invalid. When requesting multiple items at once, an invalid item ID
         * will not trigger this. Instead, the returned list of unresolved item IDs will contain the invalid item ID or IDs.
         */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/api/history/{worldDcRegion}/{itemIds}": {
    /**
     * Retrieves the history data for the requested item and world or data center.
     * Up to 100 item IDs can be comma-separated in order to retrieve data for multiple items at once.
     */
    get: {
      parameters: {
        query?: {
          /** @description The number of entries to return per item. By default, this is set to 1800, but may be set to a maximum of 999999. */
          entries?: string;
          /** @description The amount of time before now to calculate stats over, in milliseconds. By default, this is 7 days. */
          statsWithin?: string;
          /** @description The amount of time before now to take entries within, in seconds. Negative values will be ignored. */
          entriesWithin?: string;
        };
        path: {
          /** @description The item ID or comma-separated item IDs to retrieve data for. */
          itemIds: string;
          /** @description The world or data center to retrieve data for. This may be an ID or a name. Regions should be specified as Japan, Europe, North-America, Oceania, China, or 中国. */
          worldDcRegion: string;
        };
      };
      responses: {
        /** @description Data retrieved successfully. */
        200: {
          content: {
            "text/plain": components["schemas"]["HistoryMultiView"];
            "application/json": components["schemas"]["HistoryMultiView"];
            "text/json": components["schemas"]["HistoryMultiView"];
          };
        };
        /**
         * @description The world/DC or item requested is invalid. When requesting multiple items at once, an invalid item ID
         * will not trigger this. Instead, the returned list of unresolved item IDs will contain the invalid item ID or IDs.
         */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/api/tax-rates": {
    /** Retrieves the current tax rate data for the specified world. This data is provided by the Retainer Vocate in each major city. */
    get: {
      parameters: {
        query?: {
          /** @description The world or to retrieve data for. This may be an ID or a name. */
          world?: string;
        };
      };
      responses: {
        /** @description Data retrieved successfully. */
        200: {
          content: {
            "text/plain": components["schemas"]["TaxRatesView"];
            "application/json": components["schemas"]["TaxRatesView"];
            "text/json": components["schemas"]["TaxRatesView"];
          };
        };
        /** @description The world requested is invalid. */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/api/marketable": {
    /** Returns the set of marketable item IDs. */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": (number)[];
            "application/json": (number)[];
            "text/json": (number)[];
          };
        };
      };
    };
  };
  "/api/extra/stats/most-recently-updated": {
    /** Get the most-recently updated items on the specified world or data center, along with the upload times for each item. */
    get: {
      parameters: {
        query?: {
          /** @description The world to request data for. */
          world?: string;
          /** @description The data center to request data for. */
          dcName?: string;
          /** @description The number of entries to return (default 50, max 200). */
          entries?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["MostRecentlyUpdatedItemsView"];
            "application/json": components["schemas"]["MostRecentlyUpdatedItemsView"];
            "text/json": components["schemas"]["MostRecentlyUpdatedItemsView"];
          };
        };
        /** @description The world/DC requested is invalid. */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/api/extra/stats/recently-updated": {
    /**
     * Returns a list of some of the most recently updated items on the website. This endpoint
     * is a legacy endpoint and does not include any data on which worlds or data centers the updates happened on.
     */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["RecentlyUpdatedItemsView"];
            "application/json": components["schemas"]["RecentlyUpdatedItemsView"];
            "text/json": components["schemas"]["RecentlyUpdatedItemsView"];
          };
        };
      };
    };
  };
  "/upload/{apiKey}": {
    post: {
      parameters: {
        path: {
          apiKey: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["UploadParameters"];
          "text/json": components["schemas"]["UploadParameters"];
          "application/*+json": components["schemas"]["UploadParameters"];
        };
      };
      responses: {
        /** @description Success */
        200: never;
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/api/extra/stats/uploader-upload-counts": {
    /** Returns the total upload counts for each client application that uploads data to Universalis. */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": (components["schemas"]["SourceUploadCountView"])[];
            "application/json": (components["schemas"]["SourceUploadCountView"])[];
            "text/json": (components["schemas"]["SourceUploadCountView"])[];
          };
        };
      };
    };
  };
  "/api/extra/stats/world-upload-counts": {
    /** Returns the world upload counts and proportions of the total uploads for each world. */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": {
              [key: string]: components["schemas"]["WorldUploadCountView"] | undefined;
            };
            "application/json": {
              [key: string]: components["schemas"]["WorldUploadCountView"] | undefined;
            };
            "text/json": {
              [key: string]: components["schemas"]["WorldUploadCountView"] | undefined;
            };
          };
        };
      };
    };
  };
  "/api/extra/stats/upload-history": {
    /** Returns the number of uploads per day over the past 30 days. */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["UploadCountHistoryView"];
            "application/json": components["schemas"]["UploadCountHistoryView"];
            "text/json": components["schemas"]["UploadCountHistoryView"];
          };
        };
      };
    };
  };
  "/api/lists/{listId}": {
    /** Retrieves a user list. */
    get: {
      parameters: {
        path: {
          /** @description The ID of the list to retrieve. */
          listId: string;
        };
      };
      responses: {
        /** @description Data retrieved successfully. */
        200: {
          content: {
            "text/plain": components["schemas"]["UserListView"];
            "application/json": components["schemas"]["UserListView"];
            "text/json": components["schemas"]["UserListView"];
          };
        };
        /** @description The list requested does not exist. */
        404: {
          content: {
            "text/plain": components["schemas"]["ProblemDetails"];
            "application/json": components["schemas"]["ProblemDetails"];
            "text/json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ContentView: {
      /** @description The content ID of the object. */
      contentID?: string | null;
      /** @description The content type of this object. */
      contentType?: string | null;
      /** @description The character name associated with this character object, if this is one. */
      characterName?: string | null;
    };
    CurrentlyShownMultiView: {
      /** @description The item IDs that were requested. */
      itemIDs?: (number)[] | null;
      /**
       * @description The item data that was requested, as a list. Use the nested item IDs
       * to pull the item you want, or consider using the v2 endpoint instead.
       */
      items?: (components["schemas"]["CurrentlyShownView"])[] | null;
      /**
       * Format: int32 
       * @description The ID of the world requested, if applicable.
       */
      worldID?: number | null;
      /** @description The name of the DC requested, if applicable. */
      dcName?: string | null;
      /** @description The name of the region requested, if applicable. */
      regionName?: string | null;
      /** @description A list of IDs that could not be resolved to any item data. */
      unresolvedItems?: (number)[] | null;
      /** @description The name of the world requested, if applicable. */
      worldName?: string | null;
    };
    CurrentlyShownView: {
      /**
       * Format: int32 
       * @description The item ID.
       */
      itemID?: number;
      /**
       * Format: int32 
       * @description The world ID, if applicable.
       */
      worldID?: number | null;
      /**
       * Format: int64 
       * @description The last upload time for this endpoint, in milliseconds since the UNIX epoch.
       */
      lastUploadTime?: number;
      /** @description The currently-shown listings. */
      listings?: (components["schemas"]["ListingView"])[] | null;
      /** @description The currently-shown sales. */
      recentHistory?: (components["schemas"]["SaleView"])[] | null;
      /** @description The DC name, if applicable. */
      dcName?: string | null;
      /** @description The region name, if applicable. */
      regionName?: string | null;
      /**
       * Format: float 
       * @description The average listing price, with outliers removed beyond 3 standard deviations of the mean.
       */
      currentAveragePrice?: number;
      /**
       * Format: float 
       * @description The average NQ listing price, with outliers removed beyond 3 standard deviations of the mean.
       */
      currentAveragePriceNQ?: number;
      /**
       * Format: float 
       * @description The average HQ listing price, with outliers removed beyond 3 standard deviations of the mean.
       */
      currentAveragePriceHQ?: number;
      /**
       * Format: float 
       * @description The average number of sales per day, over the past seven days (or the entirety of the shown sales, whichever comes first).
       * This number will tend to be the same for every item, because the number of shown sales is the same and over the same period.
       * This statistic is more useful in historical queries.
       */
      regularSaleVelocity?: number;
      /**
       * Format: float 
       * @description The average number of NQ sales per day, over the past seven days (or the entirety of the shown sales, whichever comes first).
       * This number will tend to be the same for every item, because the number of shown sales is the same and over the same period.
       * This statistic is more useful in historical queries.
       */
      nqSaleVelocity?: number;
      /**
       * Format: float 
       * @description The average number of HQ sales per day, over the past seven days (or the entirety of the shown sales, whichever comes first).
       * This number will tend to be the same for every item, because the number of shown sales is the same and over the same period.
       * This statistic is more useful in historical queries.
       */
      hqSaleVelocity?: number;
      /**
       * Format: float 
       * @description The average sale price, with outliers removed beyond 3 standard deviations of the mean.
       */
      averagePrice?: number;
      /**
       * Format: float 
       * @description The average NQ sale price, with outliers removed beyond 3 standard deviations of the mean.
       */
      averagePriceNQ?: number;
      /**
       * Format: float 
       * @description The average HQ sale price, with outliers removed beyond 3 standard deviations of the mean.
       */
      averagePriceHQ?: number;
      /**
       * Format: int32 
       * @description The minimum listing price.
       */
      minPrice?: number;
      /**
       * Format: int32 
       * @description The minimum NQ listing price.
       */
      minPriceNQ?: number;
      /**
       * Format: int32 
       * @description The minimum HQ listing price.
       */
      minPriceHQ?: number;
      /**
       * Format: int32 
       * @description The maximum listing price.
       */
      maxPrice?: number;
      /**
       * Format: int32 
       * @description The maximum NQ listing price.
       */
      maxPriceNQ?: number;
      /**
       * Format: int32 
       * @description The maximum HQ listing price.
       */
      maxPriceHQ?: number;
      /** @description A map of quantities to listing counts, representing the number of listings of each quantity. */
      stackSizeHistogram?: ({
        [key: string]: number | undefined;
      }) | null;
      /** @description A map of quantities to NQ listing counts, representing the number of listings of each quantity. */
      stackSizeHistogramNQ?: ({
        [key: string]: number | undefined;
      }) | null;
      /** @description A map of quantities to HQ listing counts, representing the number of listings of each quantity. */
      stackSizeHistogramHQ?: ({
        [key: string]: number | undefined;
      }) | null;
      /** @description The world name, if applicable. */
      worldName?: string | null;
      /** @description The last upload times in milliseconds since epoch for each world in the response, if this is a DC request. */
      worldUploadTimes?: ({
        [key: string]: (number | null) | undefined;
      }) | null;
    };
    DataCenter: {
      name?: string | null;
      region?: string | null;
      worlds?: (number)[] | null;
    };
    HistoryMultiView: {
      /** @description The item IDs that were requested. */
      itemIDs?: (number)[] | null;
      /**
       * @description The item data that was requested, as a list. Use the nested item IDs
       * to pull the item you want, or consider using the v2 endpoint instead.
       */
      items?: (components["schemas"]["HistoryView"])[] | null;
      /**
       * Format: int32 
       * @description The ID of the world requested, if applicable.
       */
      worldID?: number | null;
      /** @description The name of the DC requested, if applicable. */
      dcName?: string | null;
      /** @description The name of the region requested, if applicable. */
      regionName?: string | null;
      /** @description A list of IDs that could not be resolved to any item data. */
      unresolvedItems?: (number)[] | null;
      /** @description The name of the world requested, if applicable. */
      worldName?: string | null;
    };
    HistoryView: {
      /**
       * Format: int32 
       * @description The item ID.
       */
      itemID?: number;
      /**
       * Format: int32 
       * @description The world ID, if applicable.
       */
      worldID?: number | null;
      /**
       * Format: int64 
       * @description The last upload time for this endpoint, in milliseconds since the UNIX epoch.
       */
      lastUploadTime?: number;
      /** @description The historical sales. */
      entries?: (components["schemas"]["MinimizedSaleView"])[] | null;
      /** @description The DC name, if applicable. */
      dcName?: string | null;
      /** @description The region name, if applicable. */
      regionName?: string | null;
      /** @description A map of quantities to sale counts, representing the number of sales of each quantity. */
      stackSizeHistogram?: ({
        [key: string]: number | undefined;
      }) | null;
      /** @description A map of quantities to NQ sale counts, representing the number of sales of each quantity. */
      stackSizeHistogramNQ?: ({
        [key: string]: number | undefined;
      }) | null;
      /** @description A map of quantities to HQ sale counts, representing the number of sales of each quantity. */
      stackSizeHistogramHQ?: ({
        [key: string]: number | undefined;
      }) | null;
      /**
       * Format: float 
       * @description The average number of sales per day, over the past seven days (or the entirety of the shown sales, whichever comes first).
       */
      regularSaleVelocity?: number;
      /**
       * Format: float 
       * @description The average number of NQ sales per day, over the past seven days (or the entirety of the shown sales, whichever comes first).
       */
      nqSaleVelocity?: number;
      /**
       * Format: float 
       * @description The average number of HQ sales per day, over the past seven days (or the entirety of the shown sales, whichever comes first).
       */
      hqSaleVelocity?: number;
      /** @description The world name, if applicable. */
      worldName?: string | null;
    };
    Listing: {
      listingID?: Record<string, unknown> | null;
      hq?: Record<string, unknown> | null;
      /** Format: int32 */
      pricePerUnit?: number | null;
      /** Format: int32 */
      quantity?: number | null;
      retainerName?: string | null;
      retainerID?: Record<string, unknown> | null;
      /** Format: int32 */
      retainerCity?: number | null;
      creatorName?: string | null;
      onMannequin?: Record<string, unknown> | null;
      sellerID?: Record<string, unknown> | null;
      creatorID?: Record<string, unknown> | null;
      /** Format: int32 */
      stainID?: number | null;
      /** Format: int64 */
      lastReviewTime?: number | null;
      materia?: (components["schemas"]["Materia"])[] | null;
    };
    ListingView: {
      /**
       * Format: int64 
       * @description The time that this listing was posted, in seconds since the UNIX epoch.
       */
      lastReviewTime?: number;
      /**
       * Format: int32 
       * @description The price per unit sold.
       */
      pricePerUnit?: number;
      /**
       * Format: int32 
       * @description The stack size sold.
       */
      quantity?: number;
      /**
       * Format: int32 
       * @description The ID of the dye on this item.
       */
      stainID?: number;
      /** @description The world name, if applicable. */
      worldName?: string | null;
      /**
       * Format: int32 
       * @description The world ID, if applicable.
       */
      worldID?: number | null;
      /** @description The creator's character name. */
      creatorName?: string | null;
      /** @description A SHA256 hash of the creator's ID. */
      creatorID?: string | null;
      /** @description Whether or not the item is high-quality. */
      hq?: boolean;
      /** @description Whether or not the item is crafted. */
      isCrafted?: boolean;
      /** @description A SHA256 hash of the ID of this listing. Due to some current client-side bugs, this will almost always be null. */
      listingID?: string | null;
      /** @description The materia on this item. */
      materia?: (components["schemas"]["MateriaView"])[] | null;
      /** @description Whether or not the item is being sold on a mannequin. */
      onMannequin?: boolean;
      /**
       * Format: int32 
       * @description The city ID of the retainer.
       * Limsa Lominsa = 1
       * Gridania = 2
       * Ul'dah = 3
       * Ishgard = 4
       * Kugane = 7
       * Crystarium = 10
       */
      retainerCity?: number;
      /** @description A SHA256 hash of the retainer's ID. */
      retainerID?: string | null;
      /** @description The retainer's name. */
      retainerName?: string | null;
      /** @description A SHA256 hash of the seller's ID. */
      sellerID?: string | null;
      /**
       * Format: int32 
       * @description The total price.
       */
      total?: number;
    };
    MarketTaxRates: {
      /** Format: int32 */
      limsaLominsa?: number | null;
      /** Format: int32 */
      gridania?: number | null;
      /** Format: int32 */
      uldah?: number | null;
      /** Format: int32 */
      ishgard?: number | null;
      /** Format: int32 */
      kugane?: number | null;
      /** Format: int32 */
      crystarium?: number | null;
      /** Format: int32 */
      sharlayan?: number | null;
    };
    Materia: {
      /** Format: int32 */
      slotID?: number | null;
      /** Format: int32 */
      materiaID?: number | null;
    };
    MateriaView: {
      /**
       * Format: int32 
       * @description The materia slot.
       */
      slotID?: number;
      /**
       * Format: int32 
       * @description The materia item ID.
       */
      materiaID?: number;
    };
    MinimizedSaleView: {
      /** @description Whether or not the item was high-quality. */
      hq?: boolean;
      /**
       * Format: int32 
       * @description The price per unit sold.
       */
      pricePerUnit?: number;
      /**
       * Format: int32 
       * @description The stack size sold.
       */
      quantity?: number;
      /** @description The buyer's character name. This may be null. */
      buyerName?: string | null;
      /** @description Whether or not this was purchased from a mannequin. This may be null. */
      onMannequin?: boolean | null;
      /**
       * Format: int64 
       * @description The sale time, in seconds since the UNIX epoch.
       */
      timestamp?: number;
      /** @description The world name, if applicable. */
      worldName?: string | null;
      /**
       * Format: int32 
       * @description The world ID, if applicable.
       */
      worldID?: number | null;
    };
    MostRecentlyUpdatedItemsView: {
      /** @description A list of item upload information in timestamp-descending order. */
      items?: (components["schemas"]["WorldItemRecencyView"])[] | null;
    };
    ProblemDetails: {
      type?: string | null;
      title?: string | null;
      /** Format: int32 */
      status?: number | null;
      detail?: string | null;
      instance?: string | null;
      [key: string]: unknown;
    };
    RecentlyUpdatedItemsView: {
      /** @description A list of item IDs, with the most recent first. */
      items?: (number)[] | null;
    };
    Sale: {
      hq?: Record<string, unknown> | null;
      /** Format: int32 */
      pricePerUnit?: number | null;
      /** Format: int32 */
      quantity?: number | null;
      buyerName?: string | null;
      onMannequin?: Record<string, unknown> | null;
      sellerID?: Record<string, unknown> | null;
      buyerID?: Record<string, unknown> | null;
      /** Format: int64 */
      timestamp?: number | null;
    };
    SaleView: {
      /** @description Whether or not the item was high-quality. */
      hq?: boolean;
      /**
       * Format: int32 
       * @description The price per unit sold.
       */
      pricePerUnit?: number;
      /**
       * Format: int32 
       * @description The stack size sold.
       */
      quantity?: number;
      /**
       * Format: int64 
       * @description The sale time, in seconds since the UNIX epoch.
       */
      timestamp?: number;
      /** @description Whether or not this was purchased from a mannequin. This may be null. */
      onMannequin?: boolean | null;
      /** @description The world name, if applicable. */
      worldName?: string | null;
      /**
       * Format: int32 
       * @description The world ID, if applicable.
       */
      worldID?: number | null;
      /** @description The buyer name. */
      buyerName?: string | null;
      /**
       * Format: int32 
       * @description The total price.
       */
      total?: number;
    };
    SourceUploadCountView: {
      /** @description The name of the client application. */
      sourceName?: string | null;
      /**
       * Format: double 
       * @description The number of uploads originating from the client application.
       */
      uploadCount?: number;
    };
    TaxRatesView: {
      /**
       * Format: int32 
       * @description The percent retainer tax in Limsa Lominsa.
       */
      "Limsa Lominsa"?: number;
      /**
       * Format: int32 
       * @description The percent retainer tax in Gridania.
       */
      Gridania?: number;
      /**
       * Format: int32 
       * @description The percent retainer tax in Ul'dah.
       */
      "Ul'dah"?: number;
      /**
       * Format: int32 
       * @description The percent retainer tax in Ishgard.
       */
      Ishgard?: number;
      /**
       * Format: int32 
       * @description The percent retainer tax in Kugane.
       */
      Kugane?: number;
      /**
       * Format: int32 
       * @description The percent retainer tax in the Crystarium.
       */
      Crystarium?: number;
      /**
       * Format: int32 
       * @description The percent retainer tax in Old Sharlayan.
       */
      "Old Sharlayan"?: number;
    };
    TradeVolumeView: {
      /**
       * Format: int64 
       * @description The number of units sold over the query interval.
       */
      units?: number;
      /**
       * Format: int64 
       * @description The total Gil exchanged over the query interval.
       */
      gil?: number;
      /**
       * Format: int64 
       * @description The start time for the query interval.
       */
      from?: number;
      /**
       * Format: int64 
       * @description The end time for the query interval.
       */
      to?: number;
    };
    UploadCountHistoryView: {
      /** @description The list of upload counts per day, over the past 30 days. */
      uploadCountByDay?: (number)[] | null;
    };
    UploadParameters: {
      uploaderID?: Record<string, unknown> | null;
      /** Format: int32 */
      worldID?: number | null;
      /** Format: int32 */
      itemID?: number | null;
      marketTaxRates?: components["schemas"]["MarketTaxRates"];
      listings?: (components["schemas"]["Listing"])[] | null;
      entries?: (components["schemas"]["Sale"])[] | null;
      contentID?: Record<string, unknown> | null;
      characterName?: string | null;
    };
    UserListView: {
      /** @description The list's ID. */
      id?: string | null;
      /** @description The time that this list was created, in milliseconds since the UNIX epoch. */
      created?: string | null;
      /** @description The time that this list was updated, in milliseconds since the UNIX epoch. */
      updated?: string | null;
      /** @description The name of this list. */
      name?: string | null;
      /** @description The IDs of the list items. */
      itemIDs?: (number)[] | null;
    };
    World: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
    };
    WorldItemRecencyView: {
      /**
       * Format: int32 
       * @description The item ID.
       */
      itemID?: number;
      /**
       * Format: double 
       * @description The last upload time for the item on the listed world.
       */
      lastUploadTime?: number;
      /**
       * Format: int32 
       * @description The world ID.
       */
      worldID?: number;
      /** @description The world name. */
      worldName?: string | null;
    };
    WorldUploadCountView: {
      /**
       * Format: double 
       * @description The number of times an upload has occurred on this world.
       */
      count?: number;
      /**
       * Format: double 
       * @description The proportion of uploads on this world to the total number of uploads.
       */
      proportion?: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
